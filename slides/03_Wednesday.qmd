---
title: "Getting the most out of R"
subtitle: "Physalia Courses</br>Day 3"
format: revealjs
editor: visual
highlight-style: oblivion
---

```{r setup}
#| include: false
library(ggplot2)
library(dplyr)
library(gt)
library(stringr)
library(palmerpenguins)
```

## Wednesday - Increasing efficiency

- Pending items

- Iteration, writing loops and using {`purrr`}

  - Apply functions to many things at once

  - Reading many files at once

  - Modifying and exporting multiple objects

  - Regular expressions for working with text strings 

## Challenge{background-color="#a4c5ff"}

"`Airports.csv`" contains yearly rankings for total number of passengers at the world's busiest airports across several countries between 2016-2020.


1. Find the busiest (highest ranked) airports for each country and year (some countries have multiple entries per year)

2. Which countries had >1 different busiest airports (by airport code) in the time period covered by the data? 


## Country-by-country approach


```{r}
#| eval: false
#| echo: true

china <-  airports[airports$Country=="China",]
china_years <- china$Year

china2016 <- china[china$Year==2016,] 
china2016busiest <- 
  china2016[which(china2016$Rank==min(china2016$Rank)),]

china2017 <- china[china$Year==2017,] 
china2017busiest <- 
  china2017[which(china2017$Rank==min(china2017$Rank)),]

china2018 <- china[china$Year==2018,] 
china2018busiest <- 
  china2018[which(china2018$Rank==min(china2018$Rank)),]

```


## Iteration - perform a process repeatedly

Any time we copy and paste code, and then edit, we are adding unnecessary steps that add room for errors

::: {style="text-align: right"}
Nick Holt (2017)  
[Function Iterations in R](https://nick-holt.github.io/2017/12/function-iterations-in-r/)
:::


## Grouped data

Most data analysis and manipulations tasks can be approached using the [“split-apply-combine”]{style="color: purple"} paradigm: 


- split the data into groups
- apply some analysis to each group
- combine the results


::: {style="text-align: right"}
Data Carpentry (2018)  
[Aggregating and analyzing data with dplyr](https://datacarpentry.org/R-genomics/04-dplyr.html)  

Hadley Wickham (2011)  
[The split-apply-combine strategy for data analysis](https://doi.org/10.18637/jss.v040.i01) 
:::


## `dplyr::group_by()`

- Define groups with one or more variables  
- Stratify a data frame 
- equivalent to `aggregate()` and the '`by = `' argument in `data.table`

![](imgs/groupby.PNG){width="64%"}    
from: Manipulación de datos en R con dplyr - Rubén Sánchez

---

## Aggregating or manipulating grouped data

Once `group_by()` creates a "grouped" version of a table, `dplyr` functions will manipulate each "group" separately and then combine the results. 

::: {style="text-align: right"}
RStudio (2021)  
[Data transformation with dplyr cheatsheet](
https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)
:::


## Within groups, we can:

- summarize group values (mean, median)

- extract the first or last _n_ rows from each group

- find the minimum or maximum values

- remove duplicated rows

- count records, etc.

## mammal sleep data (from `ggplot2`)

```{r, eval=FALSE}
head(msleep)
```

```{r, echo=FALSE}
msleep %>% head %>% gt() %>% 
  tab_style(
    cell_text(size = '21px'),
    locations = list(cells_body(),
                     cells_column_labels(everything()),
                     cells_title()))
```



## maximum `brainwt` for each order

```{r}
#| eval: false
#| echo: true

msleep %>% group_by(order) %>% slice_max(brainwt,n=1)
```


```{r}
#| eval: true
#| echo: false

msleep %>% group_by(order) %>% slice_max(brainwt,n=1)
```


## one row sampled randomly from each order
```{r}
#| eval: false
#| echo: true

msleep %>% group_by(order) %>% slice_sample(n=1)
```


```{r}
#| eval: true
#| echo: false

msleep %>% group_by(order) %>% slice_sample(n=1)
```


## summarize

```{r}
#| eval: false
#| echo: true

msleep %>% group_by(order) %>% 
  summarize(mean_slp = mean(sleep_total),
            mean_brainwt=mean(brainwt))
```

```{r}
#| eval: true
#| echo: false

msleep %>% group_by(order) %>% 
  summarize(mean_slp = mean(sleep_total), mean_brainwt=mean(brainwt))
```


## Loops are fine

(and most of the time you don't have to write them yourselves anyway)

::: columns
::: {.column width="50%"}
![](imgs/loops.png)
:::

::: {.column width="50%"}
Jenny Bryan  
[purrr tutorial](https://jennybc.github.io/purrr-tutorial/index.html)  
[Data Rectangling](https://speakerdeck.com/jennybc/data-rectangling)  
[purrr workshop](https://speakerdeck.com/jennybc/purrr-workshop)
:::
:::

## For loops

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false

for (value in sequence) {
   statement(s)
}
```

Execute a set of _statements_, once for each item in a vector, array, list, etc. and stop when the last element is reached. 

:::
::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
for (x in 1:7) {
  print(x)
} 
```
:::
:::

## Practice - for loops {background-color="#a4c5ff"}

Write a for loop to print every letter in the alphabet in lowercase (e.g. a,b,c,d,e...)
</br>

**Hints:**

- What is the length of the built-in `letters` vector?
- Which function "prints" text to the console?

## Loops and working with groups

```{r}
#| eval: false
#| echo: true

msleep %>% 
  group_by(order) %>%   # for order in orders
  slice_sample(1)       # statement to execute 
                        ## (sample element at random)
```

Similar to loops but we keep everything inside the data frame


## Vectorization is our friend

Operations occur in parallel on all elements, rather than on individual components in sequence

#### What will be the result here?

```{r}
#| eval: false
#| echo: true

x <- c(1,3,12,4,7,8)
x > 5
```


## Logical operators are vectorized (many other fns too!)

```{r}
#| eval: true
#| echo: true

x <- c(1,3,12,4,7,8)
x > 5
```

We don't need to type all of this out or a loop
```{r}
#| eval: false
#| echo: true

x[1]>5 ; x[2]>5
x[3]>5 ; x[4]>5
x[5]>5 ; x[6]>5
```

--------

![](imgs/dogscopy.jpg){width="36%" fig-align="center"} 
  
American Greetings


## If we really need to iterate

::: columns
::: {.column width="30%"}
![](imgs/purrr.jpeg)
:::

::: {.column width="70%"}
📦 **`purrr`** - Functional programming tools

- map functions to data  
- work efficiently with **lists**
- readable code

:::
:::



::: {style="text-align: right"}
Thomas Mock (2018)  
[Functional Programming in R with purrr](https://towardsdatascience.com/functional-programming-in-r-with-purrr-469e597d0229)
:::


---

::: {style="text-align: center"}

[map(]{style="color:blue; font-family: monospace; font-weight: bold"}[.x]{style="color: red; font-family: Liberation Mono; font-weight: bold"}, [.f]{style="color: green; font-family: Liberation Mono; font-weight: bold"}[, ...)]{style="color:blue; font-family: Liberation Mono; font-weight: bold"}



for every element of [.x]{style="color: red; font-family: Liberation Mono; font-weight: bold"}

apply [.f]{style="color: green; font-family: Liberation Mono; font-weight: bold"}

`...`  arguments for [.f]{style="color: green; font-family: Liberation Mono; font-weight: bold"}

:::    


## Mapping functions to data

`map(.x,`[.f]{style="color: green; font-family: monospace; font-weight: bold"}`)`

We can specify [.f]{style="color: green; font-family: monospace; font-weight: bold"} as:


- an existing function  

- an anonymous function, defined on-the-fly

- a formula: unique to `purrr`,  provides a very concise way to define anonymous functions

- a shorthand anonymous function (in more recent versions of R)

## Functions


![](imgs/r-function-syntax.png)

From: [Learn by Example.com](https://www.learnbyexample.org/r-functions/)

## Function Definition

The '`function()`' function

`function( arglist ) expr`{style="font-size: 1.5em; text-align: center; font-family: monospace; font-weight: bold"}    

</br>

**arguments** (`arglist`): values passed to the function

**expression** `(expr)`: 
an object that represents an action that can be performed by R. **Expressions contain one or more statements**


## Defining a function 

```{r}
#| eval: true
#| echo: true
 
my_custom_function <- function(my_arg){
  my_arg+1 # statement
}

my_vector <- c(3,5,6,7)

my_custom_function(my_arg = my_vector)

```


---

The body of the function –the statements that are executed when it runs– is grouped with curly braces   (`{}`)

```{r}
#| eval: true
#| echo: true
 
myfun <- function(x) {
  x + 4 # statement
}
```

::: columns
::: {.column width="30%"}
```{r}
#| echo: true
#| eval: true

myfun(6)
myfun(x=6)
```
:::

::: {.column width="70%"}
Writing the names of arguments in a function call is optional, but for functions with >1 arguments the order of the argument values matters
:::
:::


---

**But** we _don't_ need curly braces for functions with only one statement

```{r}
#| echo: true
#| eval: true
f <- function(x) x+4   
f(x=6)
```

```{r}
#| echo: true
#| eval: true
f <- function(x) mean(x)/2   
f(c(6,43,12,5,7))
```

---

Enclose multi-statement function bodies in curly braces

```{r}
#| eval: false
#| echo: true

f <- function(x)  y <- (x*0.2885) log(y) # WON'T RUN  
```

Works, note the statements in separate lines
```{r}
#| echo: true
#| eval: true
f <- function(x) {
  y <- (x*0.2885) # this is a statement
  log(y)          # this is another statement
}

f(5)
```


## Anonymous functions

**Functions on the go**
(created and used but never assigned to a variable)

### Anonymous function syntax
```{r}
#| echo: true
#| eval: true
(function(x) x * x + 3)(10)
```

the function definition in anonymous functions needs to be wrapped in parentheses to separate function and arguments

---

```{r}
#| eval: false
#| echo: true

(function(x) x + 3)(10)
```

Behaves exactly the same as

```{r}
#| eval: false
#| echo: true

f <- function(x) x + 3
f(10)
# or 
f <- function(x) {x + 3}
f(10)

```

##  Shorthand notation (since R v4.1.0)

Replaces "`function(x) {}`" with "`\(x){}`"

```{r}
#| eval: true
#| echo: true

(\(x) x + 3)(10)

(\(x) x / 2)(10)
```


::: {style="text-align: right"}
Russ Hyde (2021)  
[New features in R 4.1.0](https://www.jumpingrivers.com/blog/new-features-r410-pipe-anonymous-functions/)
:::

----------

<blockquote class="twitter-tweet" data-conversation="none" data-dnt="true"><p lang="en" dir="ltr">For what it&#39;s worth, we&#39;re now de-emphasising ~ .x + 1 in purrr in favour of \\(x) x + 1. And \\(x) is an easy syntax to teach since once you know function(x), all you need to do is replace function with \.</p>&mdash; Hadley Wickham (@hadleywickham) <a href="https://twitter.com/hadleywickham/status/1569370104000815105?ref_src=twsrc%5Etfw">September 12, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 

------------------------------

## Anonymous functions


- Handy when we want to apply a user-defined operation to many things at once

- Also known as _lambda expressions_

- Self-contained

- Comparable with similar approaches in Python



## Why write our own functions

- Avoids repetition

- Brevity

- Less room for errors

- Take advantage of tools that help us apply functions to many things at once

::: {style="text-align: right"}
Jenny Bryan - Stat545  
[Write your own R functions](https://stat545.com/functions-part1.html)
:::



## Lists

Objects which contain elements of different types, such as numbers, strings, vectors, data frames, or even other lists

```{r}
#| echo: true
#| eval: true 
 
my_list <- list(
  a_number = 7,
  a_vector = c("mouse", "cat", "dog"),
  a_dataframe = data.frame(
    a = 1:3, b = c("K", "L", "M")))
```

::: {style="text-align: right"}
Rebecca Barter (2019)  
[Learn to purrr](https://www.rebeccabarter.com/blog/2019-08-19_purrr/)
:::


---

```{r}
#| echo: true
#| eval: true 

my_list
```


## List indexing


![](imgs/listspepper.png){width="76%"}


Hadley Wickam (2015) on [Twitter](https://twitter.com/hadleywickham/status/643381054758363136?s=20&t=0Gu4Qs757o5KHEJR2ZwkEg)

---

We can also create lists by splitting other objects

Group and split with `dplyr` into a list of data frames, one for each group

```{r}
#| eval: true
#| echo: true

cars_country <- 
  gt::gtcars %>% group_by(ctry_origin) %>%
  group_split()
```

```{r}
#| eval: true
#| echo: true

cars_country  
```

```{r}
#| eval: true
#| echo: true

class(cars_country)
```

---

`group_keys()` retrieves the grouping data

```{r}
#| eval: true
#| echo: true

gt::gtcars %>% group_by(ctry_origin) %>%
  group_keys()
```

---

## Working with list elements

First element in our list (`[[1]]`)

```{r}
#| eval: true
#| echo: true
 
cars_country[[1]] %>% 
  select(model,ctry_origin) %>% head

```

---

Second element

```{r}
#| eval: true
#| echo: true

cars_country[[2]] %>% 
  select(model,ctry_origin, hp, msrp) %>% 
  head

```

---


![](imgs/purrrPost.png)


::: {style="text-align: right"}
Luis (2017)  
[Export Iteratively](
https://luisdva.github.io/rstats/export-iteratively/)
:::


## Why lists?

- Flexible, can store many kinds of objects

- We can easily create lists by splitting existing objects

- List elements can be named 


## Mapping functions to data 

- Apply functions to many things at once

- Reading many files at once

- Modifying and exporting multiple objects


## Apply functions to many things at once

```{r}
#| eval: true
#| echo: true

library(openintro)
library(purrr)
data("starbucks")
# create three vectors (numeric)
fat <- starbucks$fat
carb <- starbucks$carb
protein <- starbucks$protein
# put them in a list
nutrients <- list(fat,carb,protein)
# apply the mean function to each list element
map(nutrients,mean)
```


## Apply (custom) functions to many things at once 

```{r}
#| eval: true
#| echo: true

# fn that gets min, max, and range
getMinMaxRange <- function(x){
  min_x <- min(x)
  max_x <- max(x)
  maxmin <- max_x - min_x
  c(min_x, max_x, maxmin)
}

```



## Check that the function works for vectors

```{r}
#| eval: true
#| echo: true

getMinMaxRange(protein)
getMinMaxRange(carb)
getMinMaxRange(fat)
```



## Use `map()` to apply the fn to all the list elements

Remeber that `nutrients` is this list of numeric vectors
```{r}
#| echo: true
#| eval: false

# put them in a list
nutrients <- list(fat,carb,protein)
```


```{r}
#| echo: true
#| eval: true

map(.x = nutrients, .f = getMinMaxRange)
```

---

## Type-specific `map()` 


`map()` always returns lists  

`map_lgl()` returns a logical  

`map_int()` returns an integer vector  

`map_dbl()` returns a double vector

`map_chr()` returns a character vector

`map_df()` returns a data frame


---

```{r}
#| echo: true
#| eval: true

# returns a list
map(nutrients, median)
# flattens the list to a character vector
map_dbl(nutrients, median)

```


## What about anonymous functions and formulas?

Once we know how to define new functions, we can write anonymous functions to express what we want to do if we only need to do it once.

::: {style="text-align: right"}
Mike Cheng (2019)  
[Anonymous Functions in R - Part 1](https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-1/)  
:::


## Anonymous functions and formulas

Same behavior
```{r}
#| eval: false
#| echo: true
numlist <- list(c(5:10),c(20:27))
# anonymous function
map(numlist, function(x) x+2)
# formula notation
map(numlist, ~ .x + 2)
# shorthand notation
map(numlist,\(x) x+2)
```

---

In formula notation (defined with `~`)  

`.x` always refers to the element of the vector or list we are iterating on

Behind the scenes `~.x + 4` becomes `function(x) x+4`


## Reading or writing many files at once

[map(.x,.f)]{style="font-size: 1.5em; text-align: center; font-family: monospace"}

`.x` can be a list or vector of file paths

`.f` can be a function that reads or writes files

📄📄📄📄📄📄📄📄📄


## Practice - Let's create a directory full of text files {background-color="#a4c5ff"}


- load `openintro` and make the `nba_players_19` data available

- group the data by `team` then use `group_split()` to create a list of data frames, one for each team

- create a vector of team names (hint: see what the `dplyr::distinct` function does, or the base R `unique` alternative)

> 😲 We can iterate over two inputs simultaneously


## Mapping w/ two inputs

[`map2(.x, .y, .f)`]{style="font-size: 1.5em; text-align: center; font-family: monospace"}

Both input lists or vectors are passed to function `.f`

![](imgs/map2.png){width="87%"}   

::: {style="text-align: right"}
Altman et al. (2021)  
[Map with multiple inputs](https://dcl-prog.stanford.edu/purrr-parallel.html)
:::
 
## Practice - Directory full of text files {background-color="#a4c5ff"}

- Create the folder "nbateams" inside your "Data" folder

- Use `here()` to build file (safe and portable) paths for each team in the vector of team names
(hint: try this: `here("data","nbateams","Nets")`, and be aware that `here()` is vectorized)

- Feed the list of data frames and the vector of file paths to `readr::write_csv`
 
🔥🏀🔥

## Practice - Reading many files at once {background-color="#a4c5ff"}

- use `dir_ls()` to create a vector with the paths for your newly created csv files

- read each element of this vector with `map()` and `readr::read_csv()`

- BONUS CHALLENGE: type-specific mapping (putting everything into a data frame) will throw an error here. Why?


# Regular expressions and working with strings


## What are Regular Expressions?

- Also abbreviated as regex, R.E., or regexp (singular)  

- A concise language for describing patterns of text 

### Specially encoded 🧶[strings] of characters that match patterns in other text strings 


## Regular expressions


In practice, a computer language with its own terminologies and syntax

- Input as a text string that compiles into a mini program built specifically to identify a pattern. 

- Can be used to match, search, replace, or split text 


## 🧶Strings

A collection of characters that make up one element of a vector:


```{r}
#| eval: true
#| echo: true

test_string <- "This sentence is a string."
```


We can store multiple strings in a character vector:

```{r}
#| eval: true
#| echo: true

pets <-  c("dogs","cat","parrot","pig")
```

## Strings

::: columns
::: {.column width="50%"}
Headers and values in a data frame can also be strings:

```{r}
#| eval: true
#| include: false

library(gt)
library(tibble)
library(magrittr)
drinks_df <- tibble(drink=c("Coffee","Tea","Juice"),price=c(3.50,2.99,3.20))
```

:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false

drinks_df %>%
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "yellow")
    ),
    locations = cells_body(
      columns = vars(drink)
    )
  ) %>%
  tab_options(column_labels.background.color = "yellow")
```

:::
:::





<br/>
\* Remember how we matched patterns in column names when working with `select()` and the `matches()` selection helper


## Strings in R are _case sensitive_

Uppercase and lowercase letters are treated as distinct


```{r}
#| eval: true
#| echo: true
"rat"=="rat"
```



```{r}
#| echo: true
"rat"=="rAT"
```


## Regex searches are case sensitive by default

Our options:   

- Build case-insensitive regular expressions  

- Turn off case sensitivity in the matching 

- Modify the input text before matching 


## Why Learn Regular Expressions?


- Writing regular expressions = underutilized, valuable skill 

- Save time when we need to match, extract, or transform text by matching words, characters, and patterns

- Regular expressions can often **replace dozens of lines of code**

- Not specific to any particular programming language or command-line tool



## Regex - Getting started

::: columns
::: {.column width="33%"}
Regexp
:::

::: {.column width="33%"}
Input string
:::


::: {.column width="33%"}
Match
:::
:::


The matching is done by the regex engine. We do not access the engine directly, but functions that take regular expressions as arguments call on it whenever its needed.


## Getting started

::: columns
::: {.column width="33%"}
### Regexp
</br>
dog
:::

::: {.column width="33%"}
### Input string
</br>
"The dog is fat."

:::

::: {.column width="33%"}
### Match
</br>
The [dog]{style="color: orange"} is fat.


:::
:::

To search for a specific sequence of characters, the regexp (regular expression) we need is simply that sequence of characters

> find a **d** followed by an **o** followed by a g. (all characters together and in that order when read from left to right)


## Online regex testers
Is the regular expression matching anything?


- [rubular](https://rubular.com/) by Michael Lovitt  

- [regex101](https://regex101.com/) by Firas Dib 

- [regexr](https://regexr.com/) by Grant Skinner 

- [regexpal](https://www.regexpal.com/) - part of Dan's Developer Tools 


## Regex Testers

![](imgs/regextester.png)

## Practice - Regex {background-color="#a4c5ff"}

Navigate to [rubular](https://rubular.com/), [regex101](https://regex101.com/), [regexr](https://regexr.com/), or [regexpal](https://www.regexpal.com/)

Input the following text into the test string field: 


milk  
rice   
cereal  
salt  
juice 

Write regular expressions (one at a time) to match the things we can drink and look at the match results


## Literal Characters and Metacharacters

Strings and regular expressions are made of characters

</br>

For regular expressions, characters can be grouped into two classes depending on their behavior


## Literal characters


If input string is **"dog"** and regex is [dog]{style="color: orange"}
</br>
We will get a match whenever the characters [d]{style="color: orange"}, [o]{style="color: orange"}, and [g]{style="color: orange"} occur consecutively in the input text

</br>
`"dog"` tells the regex engine:
find a [d]{style="color: orange"}, immediately followed by an [o]{style="color: orange"}, immediately followed by a [g]{style="color: orange"} **together and in that particular order**

## Literal characters (continued)

[d]{style="color: orange"}, [o]{style="color: orange"} and   [g]{style="color: orange"} are examples of literal characters 

</br>
They stand for exactly what they are: `d` in the regex matches a “d” in the input text, `o` matches an “o” in text, and so on.

------

The power and flexibility of regular expressions comes from their ability to describe more complex patterns.

</br>

If a text pattern can be described verbally, we can most likely write a regular expression to match it.

## Bonus

::: {style="text-align: center"}
🤯🤯🧠🤯🤯  
[Autoregex](https://www.autoregex.xyz/) by [gd3kr](https://twitter.com/gd3kr)
:::

A text (in English) to regex conversion tool powered by the gpt-3 neural network machine.

## Possible patterns

- "dog" but not "dogs"  

- "dogs" but only if the match is at the start of the string,

- digits (0, 1, 2, 3, 4, 5, 6, 7, 8,  9)  

- "modeling" or "modelling"  (alternate spellings of the same word)

- words ending in "at" (words that begin or end with a specific pattern)

- strings that start with digits

- dates


## More possible patterns

- zip codes

- numbers inside square brackets and also the brackets  

- valid Twitter handles (start with @, no spaces or symbols, <16 characters)

- UPPERCASE words

## Metacharacters

To match more than literal strings of text, a small subset of characters that have special functionalities when they appear in a regular expression. Metacharacters do not stand for themselves, they interpreted in a special way.


Metacharacters include: [[]\^$.|?*+()][d]]{style="color: orange"}, which are reserved for unique matching purposes.


## Wildcards

Stand in for unknown characters  

**`.`** match any character once

[f..l]{style="color: orange"} matches "[fill]{style="background-color: yellow"}" and "[fool]{style="background-color: yellow"}", but not "flail"  


[.top]{style="color: orange"} matches "[stop]{style="background-color: yellow"} and "is[otop]{style="background-color: yellow"}e", but not "topple"  


> note the substring match in "is**otop**e" 


## Character sets

Match one or more characters enclosed in square brackets 


`[ ]` match a set of characters  


[[cb]at]{style="color: orange"} matches "[cat]{style="background-color: yellow"}", and "[bat]{style="background-color: yellow"}", but not "rat"

[[CK]at[iey]]{style="color: orange"} matches "[Caty]{style="background-color: yellow"}", "[Kati]{style="background-color: yellow"}", "[Katy]{style="background-color: yellow"}", and "[Kate]{style="background-color: yellow"}"

## Negation tokens  
  
[[^]]{style="color: orange"} 	&nbsp;&nbsp; match characters not in the specified character set

> `^` must be the first character inside the brackets


[[^aoeiou]]{style="color: orange"} matches consonants


[[^R]]{style="color: orange"} matches everything except capital R

## Character ranges
Indicate a series of sequential characters inside character sets 

Dash [\-]{style="color: orange"} inside a character set abbreviates alphabetical or numeric sequences 

[[A-D]]{style="color: orange"} matches any single letter from A,B,C, or D (uppercase)


[[5-8]]{style="color: orange"} matches any single digit between 5 and 8  

[A-Za-z]{style="color: orange"}  matches all alphabetical characters


_character sets are case sensitive_  
_character ranges can also be negated with `^`_

## Anchors

Specify the relative position of the pattern being matched   


[&nbsp;^&nbsp;]{style="color: orange"}  &nbsp;&nbsp; starts with
[&nbsp;$&nbsp;]{style="color: orange"}  &nbsp;&nbsp; ends with  
note: [&nbsp;^&nbsp;]{style="color: orange"} &nbsp;&nbsp;&nbsp;&nbsp;outside a pair of square brackets is an anchor


[&nbsp;&nbsp;\^mil]{style="color: orange"} matches "[mil]{style="background-color: yellow"}kshake" but not "family"  

[ing$]{style="color: orange"} matches "go[ing]{style="background-color: yellow"}" but not "ingest"  

> note the substring matches


## Practice {background-color="#a4c5ff"}

- Write a regexp that can match **tail**, **tool**, **tall**, and **toil**  

- How can we match **Jocelyn**, **Jocelin**, and **Joselyn** but not Jozelyn using character sets?

::: columns
::: {.column width="33%"}
a) Joscel[iy]n
:::

::: {.column width="33%"}
b) Jo[sc^z]el[yi]n
:::

::: {.column width="33%"}
c) Jo[sc]el[yi]n
:::
:::


## Quiz {background-color="#a4c5ff"}

- Which of these regular expressions matches **`food`** at the beginning of a string?

::: columns
::: {.column width="25"}
a) ^food
:::

::: {.column width="25"}
b) food
:::

::: {.column width="25"}
c) $food
:::

::: {.column width="25"}
d) food^
:::
:::


## Quantifiers

Specify how many times a character or character class must appear in the input for a match to be found

[&nbsp;?&nbsp;]{style="color: orange"} &nbsp;&nbsp;Zero or one   	
[&nbsp;\*&nbsp;]{style="color: orange"} &nbsp;&nbsp;Zero or more occurrences 	
[&nbsp;+&nbsp;]{style="color: orange"}	 &nbsp;&nbsp;One or more occurrences   
[&nbsp;{}]{style="color: orange"} 	&nbsp;&nbsp;Exactly the specified number of occurrences  	

> quantifiers apply to the preceding character


## Quantifiers

[modell?ing]{style="color: orange; font-weight: bold"} matches "[modeling]{style="background-color: yellow"}" and "[modelling]{style="background-color: yellow"}"  

> zero or one `els (l)`


[ya*y!]{style="color: orange; font-weight: bold"} matches "[yy!]{style="background-color: yellow"}", "[yay!]{style="background-color: yellow"}", "[yaaay!]{style="background-color: yellow"}", "[yaaaaaay!]{style="background-color: yellow"}", etc.

> zero or more `aes (a)`


## Quantifiers

[no+]{style="color: orange; font-weight: bold"} matches “[no]{style="background-color: yellow"}”, “[nooo]{style="background-color: yellow"}", "[noooooo]{style="background-color: yellow"}", etc, but not “n”  

> one or more `oes (o)`


[e{2}]{style="color: orange; font-weight: bold"} matches .“k[ee]{style="background-color: yellow"}p” and “b[ee]{style="background-color: yellow"}" but not “meat” 

> exactly two `ees (e)`

## Quiz {background-color="#a4c5ff"}

- Use a quantifier to match **cute**, **cuuute**, **cuuuuuute**, and **cuuuuuuuuute**  

- How can we match Computer, computer, Computers, and computers?

::: columns
::: {.column width="33%"}
a) [cC]omputers?
:::

::: {.column width="33%"}
b) Computers+
:::

::: {.column width="33%"}
c) [cC]omputer[s]+
:::

:::

## Alternation 
Alternation tokens separate a series of alternatives

[&nbsp;|&nbsp;]{style="color: orange; font-weight: bold"} &nbsp;&nbsp; either or

</br>

[dog|bird]{style="color: orange; font-weight: bold"} matches "[dog]{style="background-color: yellow"}" or "[bird]{style="background-color: yellow"}"

[gr(a|e)y]{style="color: orange; font-weight: bold"} matches "[gray]{style="background-color: yellow"}" and "[grey]{style="background-color: yellow"}"
> note the alternation enclosed in brackets


## Special sequences and escapes

[&nbsp;\\&nbsp;]{style="color: orange; font-weight: bold"} 	&nbsp;&nbsp; signals a shorthand sequence or gives special characters a literal meaning


## Escapes
[hello\\\\?]{style="color: orange; font-weight: bold"} matches "[hello?]{style="background-color: yellow"}"


> question mark treated as a literal character, but in R escape the backslash first

_Metacharacters inside a character set are stripped of their special nature_

----------------------

<blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">Writing regex is easy, just keep adding backslashes until it works. Like, I just wrote this and it only took me 24 slashes (and just as many tries)<br><br>grepl(&quot;(^|\\\\\\\\n)&lt;p&gt;(\\\\\\\\n)*&lt;\\\\\\\\/p&gt;&quot;, yolo)</p>&mdash; Garrick Aden-Buie (@grrrck) <a href="https://twitter.com/grrrck/status/1565515593171800066?ref_src=twsrc%5Etfw">September 2, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 

----------------------------------

## Shorthand sequences 

Refer to commonly-used character sets


[\\w]{style="color: orange; font-weight: bold"} &nbsp;letters, underscore, and numbers  <br>
[\\d]{style="color: orange; font-weight: bold"} &nbsp;digits<br>
[\\t]{style="color: orange; font-weight: bold"}  &nbsp;&nbsp; tab [\\n]{style="color: orange; font-weight: bold"}  &nbsp; new line  
[\\s]{style="color: orange; font-weight: bold"}  &nbsp;space  
[\\b]{style="color: orange; font-weight: bold"}  &nbsp;word boundary<br>

> Predefined character classes help us avoid malformed character sets


## Word boundaries 

[\\b]{style="color: orange; font-weight: bold"}


Match **positions** between a _word_ character (letter, digit or underscore) and a non-word character (usually a space or the start/end of a string).


> Before a sequence of word characters

[\\bcase]{style="color: orange; font-weight: bold"} matches "[case]{style="background-color: yellow"}" and "two [case]{style="background-color: yellow"}s" but not "suitcase"  

> After a sequence of word characters

[org\\b]{style="color: orange; font-weight: bold"} matches "cyb[org]{style="background-color: yellow"} rebellion" but not "organic"


## _Word_ characters 

[\w]{style="color: orange; font-weight: bold"}


Matches any character (letter, digit or underscore). Useful in combination with word boundaries and quantifiers.

</br>  


Equivalent to [\[a-zA-Z0-9_\]]{style="color: orange; font-weight: bold"}


[\\w]{style="color: orange; font-weight: bold"} matches letters (case insensitive), numbers, and underscores in:

[F33d]{style="background-color: yellow"}.%.[the_mÖusE]{style="background-color: yellow"}  [pl]{style="background-color: yellow"}@[ase]{style="background-color: yellow"}!!# 


## Practice {background-color="#a4c5ff"}

- Enter "That athlete is at the squat rack" as the test string in a regex tester.

- Explain the matches obtained with the following three regular expressions?
 
 a) at  
 b) \\bat  
 c) at\\b



## Anchor, wildcard with quantifier (0 or more)

[\^can.\*]{style="color: orange; font-weight: bold"} matches "[can]{style="background-color: yellow"}", "[can]{style="background-color: yellow"}ine", "[can]{style="background-color: yellow"}oli", and "[can]{style="background-color: yellow"}adian"

###  Wildcard and quantifier

[A.\*x]{style="color: orange; font-weight: bold"} strings that start with "**A**" and end with "**x**"


### Shorthand sequence (space) and quantifier

[\\s{3}]{style="color: orange; font-weight: bold"} matches three spaces 


## Anchors, character set, and quantifier (one or more) 

[\^[a-z]+$]{style="color: orange; font-weight: bold"} matches a lowercase string



## Word characters, quantifiers, word boundaries, and anchors

[\\w+\\b$]{style="color: orange; font-weight: bold"} matches the last word in a string

"Fix the [car]{style="background-color: yellow"}"  
"12 [eggs]{style="background-color: yellow"} "

[\^\\w+\\b]{style="color: orange; font-weight: bold"} matches the first word in a string

"[Fix]{style="background-color: yellow"}  the car."  
"[12]{style="background-color: yellow"} eggs"


---

![](imgs/regular-expressions.svg)

</br>

Modified from '[Regular Expressions](https://github.com/rstudio/concept-maps/#regular-expressions)' concept map by Greg Wilson

## Practice {background-color="#a4c5ff"}

Write regular expressions to match the following, making sure they work in an interactive regex tester:

1. strings with both letters and digits
2. strings ending in a period
3. lowercase strings
4. exactly four digits
5. strings without the letter _**s**_


# Regex in R

------

We can match column names and values in `character` strings with regular expressions


![](imgs/regexsubsetting.png)



## 📦 `stringr`

Cohesive set of functions for string manipulation


- Function names start with **`str_`**   

- All functions take a vector of strings as the first argument (pipe-friendly)  

**`regex()`** modifier to control matching behavior

`ignore_case=TRUE` will make matches case insensitive


## `stringr` examples

**Matches?**

```{r}
#| eval: true
#| echo: true

str_detect(string = c("catalog", "battlecat", "apple"), pattern = "cat")
```

Output is a logical, TRUE or FALSE vector of the same length as our input string


## `stringr` examples

**Which elements contain matches?**

```{r}
#| eval: true
#| echo: true

str_which(string = c("catalog", "battlecat", "apple"), pattern = "cat")
```

Output is the index for each of the matching elements

## `stringr` examples

**Replacing matches**

```{r}
#| eval: true
#| echo: true

str_replace(string = c("colour", "neighbour", "honour"),
            pattern = "ou",
            replacement = "o")
```


## `stringr` examples

**Case insensitive matching**

```{r}
#| eval: true
#| echo: true

str_replace(string = c("colOur", "neighboUr", "honOUr"),
            pattern = regex("ou", ignore_case = TRUE),   
            replacement = "o") 
```


## Practice - `stringr`{background-color="#a4c5ff"}


Match these REs against the test vector below using `str_detect`.  Can you explain the matches?

Regular expressions  
1. ^dog  
2. \^[a-z]+$  
3. \\d  


```{r}
#| echo: true
#| eval: false

test_vector <- c("Those dogs are small.","dogs and cats",
                 "34","(34)","rat","watchdog","placemat",
                 "BABY","2011_April","mice")
```


## Using regular expressions in data manipulation

</br>

Select, subset, keep, or discard rows and columns

Substitute or recode values

Extract or remove substrings


## Cleaning data with regex

To select variables with 📦 `dplyr` and `tidyr`, we:

- write out their names   

- refer to them by position  

- specify ranges of contiguous variables

- use 📦 `tidyselect` helper functions

---

## 📦 `tidyselect` helpers

</br>
**`matches()`**: takes regular expressions, and selects variables that match a given pattern


**`starts_with()`**: Starts with a prefix  

**`ends_with()`**: Ends with a suffix  

**`contains()`**: Contains a literal string 



## Selecting columns by name

`penguins` data from 📦 `palmerpenguins`

```{r}
#| eval: true
#| echo: true
names(penguins)
```

```{r}
#| eval: true
#| echo: true

penguins %>% 
  select(species, bill_length_mm, flipper_length_mm) %>% sample_n(3)
```

## Selecting columns by matches in variable names

```{r, eval=TRUE}
#| eval: true
#| echo: true

penguins %>% 
  select(species, matches("length")) %>% 
  sample_n(3)
```


## Match values and filter rows


Mammals sleep dataset (`msleep`) from 📦 `ggplot2`

```{r, eval=FALSE}
library(ggplot2)
```

```{r}
#| eval: true
#| echo: true
 
msleep %>% select(name,genus) %>% sample_n(4)
```


## Match values and filter rows

Filter to keep rats only

```{r}
#| eval: true
#| echo: true
msleep %>% 
  select(name,genus) %>% 
  filter(str_detect(string = name,pattern = "rat"))
```


## Practice {background-color="#a4c5ff"}

🐀 After running the code below, how can we exclude muskrats from the matches?

```{r}
#| eval: false
#| echo: true
msleep %>% 
  select(name,genus) %>% 
  filter(str_detect(string = name,pattern = "rat"))
```

